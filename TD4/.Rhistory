a <- reg.lin$coefficients[1]
b <- reg.lin$coefficients[2]
#Détermination alpha et beta
alpha <- exp(a)
beta <- b
alpha
beta
moore <- data.frame(Temps = moore.data$Date.of.introduction, NTransistors = moore.data$Transistor.count)
reg.lin <- lm(log(NTransistors)~Temps, data = moore)
summary(reg.lin)
a <- reg.lin$coefficients[1]
b <- reg.lin$coefficients[2]
#Détermination alpha et beta
alpha <- exp(a)
beta <- b
#Prédiction du nombre de transistors en 2018
newdata <- data.frame(Temps = c(2018))
exp(predict(reg.lin, newdata,interval = "confidence"))
hooker <- data.frame(Temp = hooker.data$Temp, Pression = hooker.data$Pression)
reg.lin <- lm(Pression~Temp, data = hooker)
summary(reg.lin)
#Affichage du dataset et de sa régression
par(mfrow=c(1,1))
plot(hooker$Temp, hooker$Pression, main = "Dataset Hooker", xlab = "Température (en °C)", ylab = "Pression")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(2,1))
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Hooker dataset Quantiles")
qqline(reg.lin$residuals)
#Test homoscédasticité
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité")
#Question 8
alpha <- 0.01
confint(reg.lin, level = 1 - alpha)
IC <- confint(rl.moore, "Date.of.introduction")
IC <- confint(reg.lin, "Date.of.introduction")
IC
IC <- confint(reg.lin, Temps)
IC <- confint(reg.lin, "Temps")
IC
IC_pred <- exp(predict(reg.lin, newdata,interval = "prediction"))
moore <- data.frame(Temps = moore.data$Date.of.introduction, NTransistors = moore.data$Transistor.count)
reg.lin <- lm(log(NTransistors)~Temps, data = moore)
summary(reg.lin)
a <- reg.lin$coefficients[1]
b <- reg.lin$coefficients[2]
newdata <- data.frame(Temps = c(2018))
IC_confiance <- exp(predict(reg.lin, newdata,interval = "confidence"))
IC_pred <- exp(predict(reg.lin, newdata,interval = "prediction"))
IC_pred
IC_conf
IC_confiance
#Affichage du dataset et de sa régression
par(mfrow=c(1,1))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,2))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore Normal", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
plot(exp(moore$Temps), moore$NTransistors, main = "Dataset Moore ", xlab = "Année", ylab = "Nombre de transistors")
par(mfrow=c(1,2))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore Normal", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
plot(moore$Temps, log(moore$NTransistors), main = "Dataset Moore Logarithmique", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,2))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore Normal", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2], col = "blue")
plot(moore$Temps, log(moore$NTransistors), main = "Dataset Moore Logarithmique", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2], col = "blue")
cedar.data <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP5/cedar-data.data")
View(cedar.data)
cedar.data <- read.csv("../cedar-data.data")
cedar.data <- read.csv("cedar-data.data")
cedar.data <- read.csv("cedar-data.data")
cedar <- data.frame(Diametre = cedar.data$height, Hauteur = cedar.data$height)
reg.lin <- lm(Hauteur~Diametre, data = cedar)
summary(reg.lin)
cedar <- data.frame(Diametre = cedar.data$diameter, Hauteur = cedar.data$height)
reg.lin <- lm(Hauteur~Diametre, data = cedar)
summary(reg.lin)
par(mfrow=c(1,1))
plot(cedar$Diametre, cedar$hauteur, main = "Dataset cèdres", xlab = "Diamètre", ylab = "Hauteur")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
reg.lin <- lm(Hauteur~Diametre, data = cedar)
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Cèdres dataset Quantiles")
qqline(reg.lin$residuals)
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité")
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité", which = 1)
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité", which=1)
plot(reg.lin)
plot(reg.lin)
reg.lin2 <- lm(Box-Cot(Hauteur, -1)~Diametre, data = cedar)
Box-Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
reg.lin2 <- lm(Box_Cot(Hauteur, -1)~Diametre, data = cedar)
reg.lin2
plot(reg.lin2)
plot(reg.lin2)
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(height ~ boxcox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur ~ boxcox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur ~ Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur ~ Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * Box_Cox(x, lambda), add = TRUE)
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * Box_Cox(x, lambda), add = TRUE)
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
log(x)
}
else
{
(x^lambda - 1)/lambda
}
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * Box_Cox(x, lambda), add = TRUE)
}
boxcot <- function(x, lambda)
{
if (lambda == 0)
{
log(x)
}
else
{
(x^lambda - 1)/lambda
}
}
#Question 13
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
lambda
cedar.data <- read.csv("cedar-data.data")
cedar.data <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP5/cedar-data.data")
View(cedar.data)
cedar.data <- read.csv("cedar-data.data")
cedar <- data.frame(Diametre = cedar.data$diameter, Hauteur = cedar.data$height)
reg.lin <- lm(Hauteur~Diametre, data = cedar)
summary(reg.lin)
plot(reg.lin)
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,2))
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Cèdres dataset Quantiles")
qqline(reg.lin$residuals)
#Test homoscédasticité
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité")
#Question 12
boxcot <- function(x, lambda)
{
if (lambda == 0)
{
log(x)
}
else
{
(x^lambda - 1)/lambda
}
}
#Question 13
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda), xlab = "Diamètre", ylab = "Hauteur")
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE, col = "red")
}
donnees <- data.frame(varx = c(0, 0.2, 0.3, 0.6),
vary = c(1.01, 1.44, 1.55, 2.1))
m <- lm(vary~varx, data = donnees)
summary(m)$r.squared
summary(m)
install.packages("rmarkdown")
residential_building <- read.csv(file = "Residential_Building.csv")
read.csv(file = "Residential_Building.csv")
load("C:/Users/antoi/Desktop/UTC/GI05/SY19/TD4/TD4.R")
residential_building <- read.csv(file = "Residential_Building.csv")
getwd()
setwd("C:/Users/antoi/Desktop/UTC/GI05/SY19/TD4")
residential_building <- read.csv(file = "Residential_Building.csv")
residential_building <- read.csv(file = "Residential_Building.csv", sep = ";")
residential_building
hist(residential_building$V9)
hist(residential_building$V10)
residential_building$logV9 <- log(residential_building$V9)
residential_building$logV9
reg_lin <- lm(logV10 ~., residential_building)
reg_lin <- lm(logV9 ~., residential_building)
summary(reg_lin)
summary(reg_lin)
residential_building$logV9 <- log(residential_building$V9)
residential_building$logV10 <- log(residential_building$V10)
reg_lin <- lm(logV10 ~., residential_building)
summary(reg_lin)
View(residential_building)
rank(residential_building)
residential_building <- read.csv(file = "Residential_Building.csv", sep = ";", header = TRUE)
# Question 1
hist(residential_building$V9)
hist(residential_building$V10)
residential_building$logV9 <- log(residential_building$V9)
residential_building$logV10 <- log(residential_building$V10)
# Question 2
reg_lin <- lm(logV10 ~., residential_building)
summary(reg_lin)
rank(residential_building)
rank(residential_building)
summary(reg_lin)
X <- model.matrix(reg_lin)
rang_X <- qr(X)$rank
rang_X
X
setwd("C:/Users/antoi/Desktop/UTC/GI05/SY19/TD4")
residential_building <- read.csv(file = "Residential_Building.csv", sep = ";")
# Question 1
hist(residential_building$V9)
hist(residential_building$V10)
residential_building$V9 <- log(residential_building$V9)
residential_building$V10 <- log(residential_building$V10)
# Question 2
reg_lin <- lm(logV10 ~., residential_building)
setwd("C:/Users/antoi/Desktop/UTC/GI05/SY19/TD4")
residential_building <- read.csv(file = "Residential_Building.csv", sep = ";")
# Question 1
hist(residential_building$V9)
hist(residential_building$V10)
residential_building$V9 <- log(residential_building$V9)
residential_building$V10 <- log(residential_building$V10)
# Question 2
reg_lin <- lm(V10 ~., residential_building)
summary(reg_lin)
X <- model.matrix(reg_lin)
rang_X <- qr(X)$rank
rang_X
# Question 3
install.packages("caret")
library(caret)
ctrl <- trainControl(method = "cv", number = 5)
library(caret)
install.packages('caret', dependencies = TRUE)
# TD4 : Sélection de variables
## Données Residential_building
setwd("C:/Users/antoi/Desktop/UTC/GI05/SY19/TD4")
residential_building <- read.csv(file = "Residential_Building.csv", sep = ";")
# Question 1
hist(residential_building$V9)
hist(residential_building$V10)
residential_building$V9 <- log(residential_building$V9)
residential_building$V10 <- log(residential_building$V10)
# Question 2
reg_lin <- lm(V10 ~., residential_building)
summary(reg_lin)
X <- model.matrix(reg_lin)
rang_X <- qr(X)$rank
rang_X
# Question 3
install.packages('caret', dependencies = TRUE)
library(caret)
ctrl <- trainControl(method = "cv", number = 5)
library(caret)
ctrl <- trainControl(method = "cv", number = 5)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
ctrl <- trainControl(method = "cv", number = 5)
residential_building <- read.csv2(file = "Residential_Building.csv", sep = ";")
hist(residential_building$V9)
hist(residential_building$V10)
residential_building$cost <- log(residential_building$V9)
residential_building$price <- log(residential_building$V10)
library(Matrix)
reg_lin <- lm(price ~. - cost, residential_building)
summary(reg_lin)
residential_building <- read.csv2(file = "Residential_Building.csv", sep = ";")
# Question 1
hist(residential_building$V9)
hist(residential_building$V10)
residential_building$cost <- log(residential_building$V9)
residential_building$price <- log(residential_building$V10)
reg_lin <- lm(price ~. - cost, residential_building)
summary(reg_lin)
p <- 107
X <- as.matrix(residential_building[, 1:p])
rankMatrix(X)
p <- ncol(residential_building)
N <- nrow(residential_building)
n <- nrow(residential_building)
set.seed(1)
K <- 10
fold <- sample(1:K, n, replace = TRUE)
table(fold)
fold <- sample(1:K, n, replace = FALSE)
fold <- sample(1:K, n, replace = TRUE)
table(fold)
rms <- rep(0, K)
for (k in 1:k){
cat(sprintf("Processing fold %i\n", k))
fit <- lm(price ~. - cost, data = residential_building, subset = fold != k)
pred <- predict(fit, newdata = residential_building[fold == k, ])
rms[k] <- sqrt(mean((residential_building$price - pred)**2))
}
rms <- rep(0, K)
for (k in 1:K){
cat(sprintf("Processing fold %i\n", k))
fit <- lm(price ~. - cost, data = residential_building, subset = fold != k)
pred <- predict(fit, newdata = residential_building[fold == k, ])
rms[k] <- sqrt(mean((residential_building$price - pred)**2))
}
rms
fold
mean(rms)
std(rms)
var(rms)
sqrt(var(rms))
fit <- lm(price ~. - cost, data = residential_building)
plot(fit$fitted.values ~ residential_building$price)
library(MASS)
K <- 10
fold <- sample(1:K, n, replace = TRUE)
table(fold)
rms.aic <- rep(0, K)
rms.bic <- rep(0, K)
for (k in 1:K){
cat(sprintf("Processing fold %i\n", k))
fit <- lm(price ~. - cost, data = residential_building, subset = fold != k)
fit.aic <- stepAIC(fit)
fit.bic <- stepAIC(fit, k = log(nrow(residential_building)))
pred.aic <- predict(fit_aic, newdata = residential_building[fold == k, ])
pred.bic <- predict(fit_bic, newdata = residential_building[fold == k, ])
rms.aic[k] <- sqrt(mean((residential_building$price - pred.aic)**2))
rms.bic[k] <- sqrt(mean((residential_building$price - pred.bic)**2))
}
print(c(mean(rms.aic), sd(rms.aic) / sqrt(K))
print(c(mean(rms.aic), sd(rms.aic) / sqrt(K)))
print(c(mean(rms.bic), sd(rms.bic) / sqrt(K)))
print(c(mean(rms.aic), sd(rms.aic) / sqrt(K)))
K <- 10
fold <- sample(1:K, n, replace = TRUE)
table(fold)
rms.aic <- rep(0, K)
rms.bic <- rep(0, K)
for (k in 1:K){
cat(sprintf("Processing fold %i\n", k))
fit <- lm(price ~. - cost, data = residential_building, subset = fold != k)
fit.aic <- stepAIC(fit)
fit.bic <- stepAIC(fit, k = log(nrow(residential_building)))
pred.aic <- predict(fit_aic, newdata = residential_building[fold == k, ])
pred.bic <- predict(fit_bic, newdata = residential_building[fold == k, ])
rms.aic[k] <- sqrt(mean((residential_building$price - pred.aic)**2))
rms.bic[k] <- sqrt(mean((residential_building$price - pred.bic)**2))
}
K <- 10
fold <- sample(1:K, n, replace = TRUE)
table(fold)
rms.aic <- rep(0, K)
rms.bic <- rep(0, K)
for (k in 1:K){
cat(sprintf("Processing fold %i\n", k))
fit <- lm(price ~. - cost, data = residential_building, subset = fold != k)
fit.aic <- stepAIC(fit)
fit.bic <- stepAIC(fit, k = log(nrow(residential_building)))
pred.aic <- predict(fit.aic, newdata = residential_building[fold == k, ])
pred.bic <- predict(fit.bic, newdata = residential_building[fold == k, ])
rms.aic[k] <- sqrt(mean((residential_building$price - pred.aic)**2))
rms.bic[k] <- sqrt(mean((residential_building$price - pred.bic)**2))
}
print(c(mean(rms.aic), sd(rms.aic) / sqrt(K)))
print(c(mean(rms.bic), sd(rms.bic) / sqrt(K)))
print(formula(fit.bic))
plot(fit,scale="adjr2")
plot(fit,scale="adjr2")
reg.fit<-regsubsets(price ~. - cost,data=residential_building,method=’exhaustive’,nvmax=15)
reg.fit<-regsubsets(price ~. - cost,data=residential_building,method='exhaustive',nvmax=15)
library(leaps)
reg.fit<-regsubsets(price ~. - cost,data=residential_building,method='exhaustive',nvmax=15)
plot(reg.fit,scale="adjr2")
reg.fit<-regsubsets(price ~. - cost,data=residential_building,method='exhaustive',nvmax=15)
reg.fit<-regsubsets(price ~. - cost,data=residential_building,method='exhaustive')
