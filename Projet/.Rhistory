a + b * mean(donnees$varx) == mean(donnees$vary)
par(mfrow = c(2, 2))
qqnorm(y1, main = "Normal Q-Q Plot 1", xlab = "Theoretical Quantiles", ylab = "y1")
qqline(y1)
qqnorm(y2, main = "Normal Q-Q Plot 2", xlab = "Theoretical Quantiles", ylab = "y2")
qqline(y2)
qqnorm(y3, main = "Normal Q-Q Plot 3", xlab = "Theoretical Quantiles", ylab = "y3")
qqline(y3)
qqnorm(y4, main = "Normal Q-Q Plot 4", xlab = "Theoretical Quantiles", ylab = "y4")
qqline(y4)
par(mfrow = c(2, 2))
plot(y1~x1)
plot(y2~x2)
plot(y3~x3)
plot(y4~x4)
par(mfrow = c(2, 2))
plot(y1~x1, main = "Nuages de points dataset 1")
plot(y2~x2, main = "Nuages de points dataset 2")
plot(y3~x3, main = "Nuages de points dataset 3")
plot(y4~x4, main = "Nuages de points dataset 4")
par(mfrow = c(2, 2))
plot(y1~x1, main = "Dataset 1")
plot(y2~x2, main = "Dataset 2")
plot(y3~x3, main = "Dataset 3")
plot(y4~x4, main = "Dataset 4")
par(mfrow = c(2, 2))
m1 <- lm(y1~x1, data = anscombe)
hist(m1$residuals, freq = FALSE, main = "Histogramme résidus 1")
curve(dnorm(x, mean(m1$residuals), sd(m1$residuals)), add = TRUE)
m2 <- lm(y2~x2, data = anscombe)
hist(m2$residuals, freq = FALSE, main = "Histogramme résidus 2")
curve(dnorm(x, mean(m2$residuals), sd(m2$residuals)), add = TRUE)
m3 <- lm(y3~x3, data = anscombe)
hist(m3$residuals, freq = FALSE, main = "Histogramme résidus 3")
curve(dnorm(x, mean(m3$residuals), sd(m3$residuals)), add = TRUE)
m4 <- lm(y4~x4, data = anscombe)
hist(m4$residuals, freq = FALSE, main = "Histogramme résidus 4")
curve(dnorm(x, mean(m4$residuals), sd(m4$residuals)), add = TRUE)
par(mfrow = c(2, 2))
m1 <- lm(y1~x1, data = anscombe)
hist(m1$residuals, freq = FALSE, main = "Histogramme résidus 1", xlab = "Résidus", ylab = "Densité")
curve(dnorm(x, mean(m1$residuals), sd(m1$residuals)), add = TRUE)
m2 <- lm(y2~x2, data = anscombe)
hist(m2$residuals, freq = FALSE, main = "Histogramme résidus 2", xlab = "Résidus", ylab = "Densité")
curve(dnorm(x, mean(m2$residuals), sd(m2$residuals)), add = TRUE)
m3 <- lm(y3~x3, data = anscombe)
hist(m3$residuals, freq = FALSE, main = "Histogramme résidus 3", xlab = "Résidus", ylab = "Densité")
curve(dnorm(x, mean(m3$residuals), sd(m3$residuals)), add = TRUE)
m4 <- lm(y4~x4, data = anscombe)
hist(m4$residuals, freq = FALSE, main = "Histogramme résidus 4", xlab = "Résidus", ylab = "Densité")
curve(dnorm(x, mean(m4$residuals), sd(m4$residuals)), add = TRUE)
plot(m1$fitted.values, rstandard(m1))
plot(m2$fitted.values, rstandard(m2))
plot(m3$fitted.values, rstandard(m3))
plot(m4$fitted.values, rstandard(m4))
par(mfrow = c(2, 2))
plot(m1$fitted.values, rstandard(m1), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité 1")
plot(m2$fitted.values, rstandard(m2), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité 2")
plot(m3$fitted.values, rstandard(m3), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité 3")
plot(m4$fitted.values, rstandard(m4), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité 4")
#Régression linéaire
hooker <- data.frame(Temp = hooker.data$Temp, Pression = hooker.data$Pression)
reg.lin <- lm(Pression~Temp, data = hooker)
summary(reg.lin)
#Affichage du dataset et de sa régression
plot(hooker$Temp, hooker$Pression, main = "Dataset Hooker")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,1))
plot(hooker$Temp, hooker$Pression, main = "Dataset Hooker")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,1))
plot(hooker$Temp, hooker$Pression, main = "Dataset Hooker", xlab = "Température (en °C)", ylab = "Pression")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
qqnorm(reg.lin$residuals)
qqline(reg.lin$residuals)
qqnorm(reg.lin$residuals, ylab = "Hooker dataset Quantiles")
qqline(reg.lin$residuals)
par(mfrow=c(1,2))
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Hooker dataset Quantiles")
qqline(reg.lin$residuals)
#Test homoscédasticité
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés")
par(mfrow=c(2,1))
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Hooker dataset Quantiles")
qqline(reg.lin$residuals)
#Test homoscédasticité
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés")
par(mfrow=c(2,1))
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Hooker dataset Quantiles")
qqline(reg.lin$residuals)
#Test homoscédasticité
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité")
alpha <- 0.01
confint(reg.lin, level = 1 - alpha)
alpha <- exp(a)
beta <- b
alpha
beta
moore <- data.frame(Temps = moore.data$Date.of.introduction, NTransistors = moore.data$Transistor.count)
reg.lin <- lm(log(NTransistors)~Temps, data = moore)
summary(reg.lin)
a <- reg.lin$coefficients[1]
b <- reg.lin$coefficients[2]
#Détermination alpha et beta
alpha <- exp(a)
beta <- b
alpha
beta
moore <- data.frame(Temps = moore.data$Date.of.introduction, NTransistors = moore.data$Transistor.count)
reg.lin <- lm(log(NTransistors)~Temps, data = moore)
summary(reg.lin)
a <- reg.lin$coefficients[1]
b <- reg.lin$coefficients[2]
#Détermination alpha et beta
alpha <- exp(a)
beta <- b
#Prédiction du nombre de transistors en 2018
newdata <- data.frame(Temps = c(2018))
exp(predict(reg.lin, newdata,interval = "confidence"))
hooker <- data.frame(Temp = hooker.data$Temp, Pression = hooker.data$Pression)
reg.lin <- lm(Pression~Temp, data = hooker)
summary(reg.lin)
#Affichage du dataset et de sa régression
par(mfrow=c(1,1))
plot(hooker$Temp, hooker$Pression, main = "Dataset Hooker", xlab = "Température (en °C)", ylab = "Pression")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(2,1))
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Hooker dataset Quantiles")
qqline(reg.lin$residuals)
#Test homoscédasticité
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité")
#Question 8
alpha <- 0.01
confint(reg.lin, level = 1 - alpha)
IC <- confint(rl.moore, "Date.of.introduction")
IC <- confint(reg.lin, "Date.of.introduction")
IC
IC <- confint(reg.lin, Temps)
IC <- confint(reg.lin, "Temps")
IC
IC_pred <- exp(predict(reg.lin, newdata,interval = "prediction"))
moore <- data.frame(Temps = moore.data$Date.of.introduction, NTransistors = moore.data$Transistor.count)
reg.lin <- lm(log(NTransistors)~Temps, data = moore)
summary(reg.lin)
a <- reg.lin$coefficients[1]
b <- reg.lin$coefficients[2]
newdata <- data.frame(Temps = c(2018))
IC_confiance <- exp(predict(reg.lin, newdata,interval = "confidence"))
IC_pred <- exp(predict(reg.lin, newdata,interval = "prediction"))
IC_pred
IC_conf
IC_confiance
#Affichage du dataset et de sa régression
par(mfrow=c(1,1))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,2))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore Normal", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
plot(exp(moore$Temps), moore$NTransistors, main = "Dataset Moore ", xlab = "Année", ylab = "Nombre de transistors")
par(mfrow=c(1,2))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore Normal", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
plot(moore$Temps, log(moore$NTransistors), main = "Dataset Moore Logarithmique", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,2))
plot(moore$Temps, moore$NTransistors, main = "Dataset Moore Normal", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2], col = "blue")
plot(moore$Temps, log(moore$NTransistors), main = "Dataset Moore Logarithmique", xlab = "Année", ylab = "Nombre de transistors")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2], col = "blue")
cedar.data <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP5/cedar-data.data")
View(cedar.data)
cedar.data <- read.csv("../cedar-data.data")
cedar.data <- read.csv("cedar-data.data")
cedar.data <- read.csv("cedar-data.data")
cedar <- data.frame(Diametre = cedar.data$height, Hauteur = cedar.data$height)
reg.lin <- lm(Hauteur~Diametre, data = cedar)
summary(reg.lin)
cedar <- data.frame(Diametre = cedar.data$diameter, Hauteur = cedar.data$height)
reg.lin <- lm(Hauteur~Diametre, data = cedar)
summary(reg.lin)
par(mfrow=c(1,1))
plot(cedar$Diametre, cedar$hauteur, main = "Dataset cèdres", xlab = "Diamètre", ylab = "Hauteur")
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
reg.lin <- lm(Hauteur~Diametre, data = cedar)
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Cèdres dataset Quantiles")
qqline(reg.lin$residuals)
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité")
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité", which = 1)
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité", which=1)
plot(reg.lin)
plot(reg.lin)
reg.lin2 <- lm(Box-Cot(Hauteur, -1)~Diametre, data = cedar)
Box-Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
reg.lin2 <- lm(Box_Cot(Hauteur, -1)~Diametre, data = cedar)
reg.lin2
plot(reg.lin2)
plot(reg.lin2)
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(height ~ boxcox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur ~ boxcox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur ~ Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur ~ Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcox(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1)) {
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * Box_Cox(x, lambda), add = TRUE)
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
return(log(x))
}
else
{
return((x^lambda - 1)/lambda)
}
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * Box_Cox(x, lambda), add = TRUE)
}
Box_Cot <- function(x, lambda)
{
if (lambda == 0)
{
log(x)
}
else
{
(x^lambda - 1)/lambda
}
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~Box_Cox(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * Box_Cox(x, lambda), add = TRUE)
}
boxcot <- function(x, lambda)
{
if (lambda == 0)
{
log(x)
}
else
{
(x^lambda - 1)/lambda
}
}
#Question 13
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(cedar$Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
lambda
cedar.data <- read.csv("cedar-data.data")
cedar.data <- read.csv("C:/Users/antoi/Desktop/UTC/SY02 - Méthodes statistiques pour l'ingénieur/TP5/cedar-data.data")
View(cedar.data)
cedar.data <- read.csv("cedar-data.data")
cedar <- data.frame(Diametre = cedar.data$diameter, Hauteur = cedar.data$height)
reg.lin <- lm(Hauteur~Diametre, data = cedar)
summary(reg.lin)
plot(reg.lin)
abline(reg.lin$coefficients[1], reg.lin$coefficients[2])
par(mfrow=c(1,2))
#Test normalité
qqnorm(reg.lin$residuals, ylab = "Cèdres dataset Quantiles")
qqline(reg.lin$residuals)
#Test homoscédasticité
plot(reg.lin$fitted.values, rstandard(reg.lin), xlab = "Valeurs prédites", ylab = "Résidus standardisés", main = "Homoscédasticité")
#Question 12
boxcot <- function(x, lambda)
{
if (lambda == 0)
{
log(x)
}
else
{
(x^lambda - 1)/lambda
}
}
#Question 13
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda))
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE)
}
par(mfrow=c(3,2))
for (lambda in c(-1, -1/2, 0, 1/3, 1/2, 1))
{
plot(cedar$Diametre, cedar$Hauteur, main = paste("lambda = ", lambda), xlab = "Diamètre", ylab = "Hauteur")
reg.lin <- lm(Hauteur~boxcot(Diametre, lambda), data = cedar)
print(summary(reg.lin)$r.squared)
curve(reg.lin$coefficients[1] + reg.lin$coefficients[2] * boxcot(x, lambda), add = TRUE, col = "red")
}
donnees <- data.frame(varx = c(0, 0.2, 0.3, 0.6),
vary = c(1.01, 1.44, 1.55, 2.1))
m <- lm(vary~varx, data = donnees)
summary(m)$r.squared
summary(m)
install.packages("rmarkdown")
version
library(farff)
library(dplyr)
library(corrplot)
library(glmnet)
library(mgcv)
library(caret)
sessionInfo()
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
jupyter
jupyter kernelspec --version
IRkernel::installspec(user = FALSE)
install.packages('devtools')
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
version
R.home()
install.packages("IRkernel")
IRkernel::installspec(user = FALSE)
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
where jupyter
system("which python")
system("jupyter --version")
# Analyse de a24_reg_app.txt
library(glmnet)
library(mgcv)
library(caret)
library(class)
library(randomForest)
library(rpart)
library(e1071)
# Chargement du jeu de données
setwd("C:/Users/antoi/Desktop/UTC/GI05/SY19/Projet")
data <- read.csv("a24_reg_app.txt", sep = " ")
set.seed(20241108)
set.seed(123)
# Caractéristiques générales du jeu de données
n = nrow(data)
p = ncol(data) - 1
# Observation de la distribution de certaines variables
boxplot(data$X1, data$X2, data$X3,
names = c("X1", "X2", "X3"),
main = "Boxplot of X1, X2, and X3", # Title
ylab = "Values", # Y-axis label
col = c("lightblue", "lightgreen", "lightcoral"))
# Analyse de la variable y
par(mfrow=c(1, 3))
hist(data$y, xlab = "Valeurs de y", ylab = "Fréquence", main = "Histogramme de y")
hist(data$X8, xlab = "Valeurs de X8", ylab = "Fréquence", main = "Histogramme de X8")
hist(data$X75, xlab = "Valeurs de X77", ylab = "Fréquence", main = "Histogramme de X75")
# Test de la normalité de y
resultat <- shapiro.test(data$y)
resultat
ks.result <- ks.test(data$y, "punif", min = 0, max = 10)
ks.result
ks.result <- ks.test(data$X8, "punif", min = 0, max = 10)
ks.result
library(mclust)
library(Matrix)
library(corrplot)
library(e1071)
library(caTools)
library(class)
library(nnet)
library(MASS)
library(stats)
library(rpart)
library(rpart.plot)
library(randomForest)
library(MLmetrics)
# Chargement du jeu de données
setwd("C:/Users/antoi/Desktop/UTC/GI05/SY19/Projet")
data <- read.csv("a24_clas_app.txt", sep = " ")
data$y <- factor(data$y)
set.seed(20241108)
# Caractéristiques générales du jeu de données
n = nrow(data)
p = ncol(data) - 1
X <- as.matrix(data[, 1:p])
rankMatrix(X)
resultat <- shapiro.test(data$y)
resultat <- shapiro.test(data$X21)
resultat
size(data)
len(data)
ncol(data)
resultat <- shapiro.test(data$X22)
resultat
resultat <- shapiro.test(data$X23)
resultat
ks.result <- ks.test(data$X8, "punif", min = 0, max = 10)
ks.result
resultat <- shapiro.test(data$X46)
resultat
resultat <- shapiro.test(data$X22)
resultat
hist(data$X21, main = "Variable X21", xlab = "X21")
resultat <- shapiro.test(data$X21)
resultat
